/*
 * generated by Xtext
 */
package edu.cmu.sei.alisa.validation

import edu.cmu.sei.alisa.alisa.ContractualElement
import edu.cmu.sei.alisa.alisa.Goal
import edu.cmu.sei.alisa.alisa.Organization
import edu.cmu.sei.alisa.alisa.RSALContainer
import edu.cmu.sei.alisa.alisa.Requirement
import edu.cmu.sei.alisa.alisa.Stakeholder
import edu.cmu.sei.alisa.alisa.VerificationActivity
import org.eclipse.xtext.validation.Check
import org.osate.aadl2.Aadl2Package

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class AlisaValidator extends AbstractAlisaValidator 
{  
 
  public static val INVALID_IDENTIFIER = 'existingIdentifier'
	
	@Check
	def checkStakeholder(Stakeholder stakeholder) {
		checkStakeholderName (stakeholder)
	}
	
	def checkStakeholderName(Stakeholder stakeholder)
	{ 
		var org = (stakeholder.eContainer() as Organization);
		if (org != null) {
			for (other : org.stakeholder)
			{
				if (other instanceof Stakeholder)
				{
					var otherStak = other as Stakeholder;
					if (otherStak != null)
					{
						if ((otherStak != stakeholder) && (otherStak.name.equalsIgnoreCase(stakeholder.name)))
						{
							error("Stakeholders names have to be unique", Aadl2Package.eINSTANCE.namedElement_Name);
							return;
						}
					}
				}
			}
		}
	}



	@Check
	def checkVerificationActivity (VerificationActivity verificationActivity)
	{
		checkVerificationActivityName (verificationActivity)
	}
	
	def checkVerificationActivityName (VerificationActivity verificationActivity)
	{
		if (verificationActivity.eContainer() instanceof RSALContainer)
		{
			var model = (verificationActivity.eContainer() as RSALContainer);
			if (model != null) {
				for (other : model.content)
				{
					if (other instanceof VerificationActivity)
					{
						var otherVA = other as VerificationActivity;
						if (otherVA != null)
						{
							if ((otherVA != verificationActivity) && (otherVA.name.equalsIgnoreCase(verificationActivity.name)))
							{
								error("Verification Activities names have to be unique", Aadl2Package.eINSTANCE.namedElement_Name);
								return;
							}
						}
					}
				}
			}
		}
		
	}

	@Check
	def checkRequirement(Requirement requirement) {
		checkContractualName (requirement)
	}

	@Check
	def checkGoal(Goal requirement) {
		checkContractualName (requirement)
	}
	
	def checkContractualName(ContractualElement requirement)
	{
		var model = (requirement.eContainer() as RSALContainer);
		if (model != null) {
			for (other : model.content)
			{
				if (other instanceof ContractualElement)
				{
					var otherReq = other as ContractualElement;
					if (otherReq != null)
					{
						if ((otherReq != requirement) && (otherReq.name.equalsIgnoreCase(requirement.name)))
						{
							error("Requirement and goal names have to be unique within a container", Aadl2Package.eINSTANCE.namedElement_Name);
							return;
						}
					}
				}
			}
		}
	}
	
}
