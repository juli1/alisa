grammar edu.cmu.sei.alisa.Alisa with org.eclipse.xtext.common.Terminals

generate alisa "http://www.cmu.edu/sei/alisa/Alisa"
//import "platform:/resource/org.osate.aadl2/model/aadl2.ecore" as aadl2
//import "http://aadl.info/AADL/2.0" as aadl2

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "platform:/resource/org.osate.aadl2/model/aadl2.ecore" as aadl2
import "http://aadl.info/AADL/2.0" as aadl2
//import "platform:/resource/org.osate.aadl2/model/instance.ecore" as instance
import "http://aadl.info/AADL/2.0/instance" as instance

AlisaModel: RSALPackage | Organization | RequirementCategories | VerificationCategories | AssuranceCase;

ContractualElement: Goal | Requirement | VerificationAssumption;
	
//NamedElement returns aadl2::NamedElement :
//	Goal | Requirement | Assumption | Category | RSALSection |RSALPackage
//|Stakeholder |VerificationActivity|VerificationResult |ExternalDocument
//| Organization | Categories
//
//;

RSALPackage returns RSALContainer:
	"package" name = ID
	('imports' importedNamespace+=[RSALContainer](',' importedNamespace+=[RSALContainer])*)?
	('with' importedNamespace+=[aadl2::AadlPackage|QPREF](',' importedNamespace+=[aadl2::AadlPackage|QPREF])*)?
	content+= //RSALElement 
	(Goal | Requirement | 
	ContractualElementProxy | RSALSection | VerificationActivity  |ExternalDocument)+  
	('issues'  issue+=ValueString (',' issue+=ValueString)* )? 
	'end'
	;

//RSALElement:
//	Goal | Requirement | 
//	ContractualElementProxy | RSALSection | VerificationActivity  |ExternalDocument
//;
	
RSALSection returns RSALContainer:
	'section' name =ID ('for' target=[aadl2::NamedElement|QNEREF])?
	content+= //RSALElement 
	(Goal | Requirement | 
	ContractualElementProxy | RSALSection  | VerificationActivity  |ExternalDocument)+  
	('issues'  issue+=ValueString (','issue+=ValueString)* )? 
	'end' 
;

Organization:
	'organization' name = ID
	stakeholder += Stakeholder+
	'end'
;

Description : 
	( description += DescriptionElement  )+
;

 DescriptionElement :
 	text = STRING | ref = [RSALVariable|ID]
 ;	

RSALVariable :
	name = ID '=' value = STRING
;
// to allow mapping of requirements and goals into a section based report structure
ContractualElementProxy :
	'@' proxyreference = [ContractualElement|DOTTEDREF]
;



Goal returns Goal:
	'goal' name=ID 
	(( 'for' target=[aadl2::NamedElement|QNEREF])?
	 &('category'  category+=[RequirementCategory|CATREF](','category+=[RequirementCategory|CATREF])*)?
	 &('title'  title=ValueString )? 
	 &('description'  description=ValueString)? 
	 &('assertion'  	assert=ValueString )? 
	 &('rationale'  rationale=ValueString)? 
	 &('issues'  issue+=ValueString (','issue+=ValueString)* )? 
	 &('refines'  refinesReference+=[Goal|DOTTEDREF](',' refinesReference+=[Goal|DOTTEDREF])*)? 
	 &('decomposes'  decomposesReference+=[Goal|DOTTEDREF](',' decomposesReference+=[Goal|DOTTEDREF])*)? 
	 &('evolves'  evolvesReference+=[Goal|DOTTEDREF](',' evolvesReference+=[Goal|DOTTEDREF])*)? 
	 &('conflicts'  conflictsReference+=[Goal|DOTTEDREF](',' conflictsReference+=[Goal|DOTTEDREF])*)? 
	 &('stakeholder'  stakeholderReference+=[Stakeholder|DOTTEDREF] (',' stakeholderReference+=[Stakeholder|DOTTEDREF])*)?
	 &('see' 'goal'  stakeholderRequirementReference+=[Goal|DOTTEDREF] (',' stakeholderRequirementReference+=[Goal|DOTTEDREF])*)?
	 &('see' 'requirement'  systemRequirementReference+=[ContractualElement|DOTTEDREF] (',' systemRequirementReference+=[ContractualElement|DOTTEDREF])*)?
	 &('see' 'document'  docReference+=XDocUri (',' docReference+=XDocUri)*)? 
	& ('see' ':' modelReference+=QDOTTEDPAREF (',' modelReference+=QDOTTEDPAREF)*)? 
	)
	 'end';
	
Requirement:
	'requirement'  name=ID   
	(( 'for' target=[aadl2::NamedElement|QNEREF])?
 	&('category'  category+=[RequirementCategory|CATREF](',' category+=[RequirementCategory|CATREF])*)?
	&('title'  title=ValueString)? 
	&('description'  description=ValueString)? 
	&('assertion'  assert=ValueString)? 
	&('rationale'  rationale=ValueString)? 
	&('issues'  issue+=ValueString (','issue+=ValueString)* )? 
	&('see' 'goal'  goalReference+=[Goal] (',' goalReference+=[Goal])*)?
	&('see' 'hazard'  hazardReference+=QNEREF (',' hazardReference+=QNEREF)*)? // hazardReference+=[aadl2::NamedElement|QNEREF]
	&('refines'  refinesReference+=[Requirement|DOTTEDREF](',' refinesReference+=[Requirement|DOTTEDREF])*)? 
	&('decomposes'  decomposesReference+=[Requirement|DOTTEDREF](',' decomposesReference+=[Requirement|DOTTEDREF])*)? 
	&('evolves'  evolvesReference+=[Requirement|DOTTEDREF](',' evolvesReference+=[Requirement|DOTTEDREF])*)? 
	&('see' 'goal'  stakeholderRequirementReference+=[Goal|DOTTEDREF] (',' stakeholderRequirementReference+=[Goal|DOTTEDREF])*)?
	&('see' 'requirement'  systemRequirementReference+=[ContractualElement|DOTTEDREF] (',' systemRequirementReference+=[ContractualElement|DOTTEDREF])*)?
	&(verifiedBy+=VerificationActivity)*
	&(argument=AssuranceArgument)?
	&('see' 'document'  docReference+=XDocUri (',' docReference+=XDocUri)*)? 
	& ('see' ':' modelReference+=QDOTTEDPAREF (',' modelReference+=QDOTTEDPAREF)*)? 
	)
	'end';

	
VerificationAssumption:
	'verification' 'assumption'  name=ID   
	(( 'for' target=[VerificationActivity|DOTTEDREF])?
 	&('category'  category+=[RequirementCategory|CATREF](',' category+=[RequirementCategory|CATREF])*)?
	&('title'  title=ValueString)? 
	&('description'  description=ValueString)? 
	&('asserted' 'by'  assert=[Requirement|DOTTEDREF])? 
	&(verifiedBy+=VerificationActivity)*
	&(argument=AssuranceArgument)?
	&('rationale'  rationale=ValueString)? 
	&('issues'  issue+=ValueString (','issue+=ValueString)* )? 
	)
	'end';

ExternalDocument:
	'document'
	name=ID 'see'  externalReference=DOCPATH 
	'end'	
;


XDocUri : 
	docReference=[ExternalDocument|DOTTEDREF] ( '#' docFragment=DOCFRAGMENT)?
;


RequirementCategories returns Categories:
	'requirement''categories' name = ID
	category += RequirementCategory+
	'end'
;

VerificationCategories returns Categories:
	'verification''categories' name = ID
	category += VerificationCategory+
	'end'
;

Category : RequirementCategory | VerificationCategory;

RequirementCategory :
	'category' name = ID ('extends' extends=[RequirementCategory|DOTTEDREF])? 
;

VerificationCategory :
	'category' name = ID ('extends' extends=[VerificationCategory|DOTTEDREF])? 
;


ValueString :
	// remove quotes from string in ValueConverter 
	STRING
;

/*
 * Stakeholder
 */
Stakeholder:
	'stakeholder' name=ID
	(('title'  title=ValueString )?
	&('description'  description=ValueString )?
	&('role'  role=ValueString )?
	&('email'  email=ValueString)?
	&('phone'  phone=ValueString)?)
	'end' 
;

AssuranceArgument:
	'argument' expression=ArgumentExpr ';'
	('rationale'  rationale=ValueString)? 
	'end'
;

ArgumentExpr:
	ImpliesExpr
;

ImpliesExpr returns ArgumentExpr:
	OrExpr (=>({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?
;

OrExpr returns ArgumentExpr:
	AndExpr (=>({BinaryExpr.left=current} op='or') right=AndExpr)*
;

AndExpr returns ArgumentExpr:
	AtomicExpr (=>({BinaryExpr.left=current} op='and') right=AtomicExpr)*
;

AtomicExpr returns ArgumentExpr:
	{RefExpr} id=ArgumentReference
|	'(' ArgumentExpr ')'
;

ArgumentReference:
	reference=[VerificationActivity|DOTTEDREF]
	('*' weight=INT )?
;

/*
 * Verification Activity
 */

VerificationActivity:
	'verification' 'activity' name=ID
	(('title'  title=ValueString)?
	&('description'  description=ValueString)?
 	&('category'  category+=[Category|DOTTEDREF](',' category+=[Category|DOTTEDREF])*)?
	&('method'  method=VerificationMethod)?
//	('parameters'  verificationParameters+=([ElementReference])*)?
	&(assumption+=VerificationAssumption)*
	)
	'end'  
;
 

VerificationMethod:
	'verification' 'method' name=ID '='
 	 language=SupportedLanguage method = ValueString
	(('title'  title=ValueString)?
	&('description'  description=ValueString)?
 	&('category'  category+=[Category|DOTTEDREF](',' category+=[Category|DOTTEDREF])*)?
 	)
;

SupportedLanguage:
	'lute' | 'agree'
;

/*
 * Assurance Results
 */
 
 AssuranceCase: 
 	'assurance' 'case' name = ID
 	'for' target = [instance::SystemInstance]
 	results+= AssuranceResult+
 	'end'
 ;

VerificationResult:
	'verification' 'result' name=ID 'of' verificationActivity=[VerificationActivity]
	(('output'  title=ValueString)?
	&('logfile'  description=ValueString)?
	&('date'  method=ValueString)?
	&('state'  state=VerificationResultState)?
	&('status'  status=VerificationResultStatus)? )
	(assumptionVerificationResult+= VerificationResult)*
	'end'  
;

AssuranceResult:
	'assurance' 'result' name=ID 'of' requirement=[Requirement]
	('pass'  passCount=INT)
	('fail'  failCount=INT)
	('neutral' neutralCount=INT)
	('unknown' unknownCount=INT) 
	(subClaimResult += AssuranceResult)*
	(subVAResult+= VerificationResult)*
	'end'  
;

RSALResult: VerificationResult | AssuranceResult;

enum  VerificationResultState:
	SCHEDULED='scheduled' | COMPLETED='completed' | INPROGRESS='inprogress'
;

enum VerificationResultStatus:
	PASS='pass' | FAIL='fail' | NEUTRAL='neutral' | UNKNOWN='unknown'
;

//	// classifier reference
//QCLREF:
//	(ID '::')* ID ('.' ID)?;

	// package reference
QPREF:
	ID ('::' ID)*;

// named element reference or other multi-dot path with or without qualifier
QNEREF:
	(ID '::')* ID ('.' ID)*;

//  dotted path property ref or property ref
QDOTTEDPAREF:
	(QNEREF (PAREF)?)|PAREF
;

// dotted path as relative reference
DOTTEDREF:
	ID ('.' ID)* ;	

// dotted path as relative reference
CATREF:
	ID '.' ID;	


// reference to property (association)	
PAREF: '#' ID ('::' ID)?;


DOCPATH: ( ID '/')* ID '.' ID;

DOCFRAGMENT: ID ('.' ID)*;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

	//terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal ID:
	('a'..'z'
	| 'A'..'Z') (('_')? ('a'..'z'
	| 'A'..'Z'
	| '0'..'9'))*;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;



