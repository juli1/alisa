grammar edu.cmu.sei.alisa.Alisa 


//with org.osate.xtext.aadl2.properties.Properties

with org.eclipse.xtext.common.Terminals

generate alisa "http://www.cmu.edu/sei/alisa/Alisa"

// make the AADL2 Meta model accessible
import "platform:/resource/org.osate.aadl2/model/aadl2.ecore" as aadl2


AlisaModel:
	content+=( //Goals | 
		Stakeholder|Requirement|VerificationActivity|VerificationResult|ElementType
	)*;
	
ValueString :
	// remove quotes from string in ValueConverter
	STRING
;

/*
 * Stakeholder
 */
Stakeholder:
	'stakeholder' name=ID
	('title' ':' title=ValueString)?
	('description' ':' description=ValueString)?
	('role' ':' role=ValueString)?
	'end' 'stakeholder' ';'
;



/*
 * Requirement
 */
Requirement:
	'requirement' name=ID
	('title' ':' title=ValueString)?
	('description' ':' description=ValueString)?
	('comment' ':' comment=ValueString)?
	('assigned' 'to' ':' assignedTo+=([Stakeholder])*)?
	('referenced' 'by' ':' referencedBy+=([ElementType])*)?
	('verified' 'by' ':' verifiedBy+=(VerificationDecomposition)*)?
	('decomposed' 'by' ':' decomposedBy+=(RequirementDecomposition)*)?
	'end' 'requirement' ';'
;

RequirementDecomposition:
	element=([Requirement])|
	left=([Requirement]) type=('and'|'or') right=(RequirementDecomposition)
;

VerificationDecomposition:
	element=([VerificationActivity])|
	left=([VerificationActivity]) type=('and'|'or') right=(VerificationDecomposition)
;



/*
 * System Element
 */
ElementType:
	'system' 'element' name=ID
	('reference' ':' reference=ValueString)?
	('element-type' ':' elementType=ValueString)?
	('model-type' ':' modelType=ValueString)?
	('documentDetails' ':' details=ValueString)?
	('version' ':' version+=(ValueString)*)?
	'end' 'system' 'element' ';'
;

/*
 * Verification Activity
 */

VerificationActivity:
	'verification' 'activity' name=ID
	('title' ':' title=ValueString)?
	('description' ':' description=ValueString)?
	('method' ':' method=VerificationMethod)?
	('assigned' 'to' ':' assignedTo+=([Stakeholder])*)?
	'end' 'verification' 'activity' ';'
;


VerificationMethod:
	'manual' | 'automatic'
;


/*
 * Verification Result
 */

VerificationResult:
	'verification' 'result' name=ID 'of' referencedVerificationMethod+=([VerificationActivity])*
	('output' ':' title=ValueString)?
	('logfile' ':' description=ValueString)?
	('date' ':' method=ValueString)?
	('state' ':' state=VerificationResultState)?
	('status' ':' status=VerificationResultStatus)?
	'end' 'verification' 'result' ';'
;

VerificationResultState:
	'scheduled' | 'passed' | 'inprogress'
;

VerificationResultStatus:
	'ok' | 'unknown' | 'tbd'
;

//Goals:
//	'goals' 'for' classifier = [aadl2::Classifier|QCLREF]
//;
//
//Goal: 
//	name=ID 'goal'
//	('title' ':' title=ValueString)?
//	('description' ':' description=ValueString)?
//	('rationale' ':' rationale=ValueString)?
//	('see' ':' modelReference=ValueString)?
//;


QCLREF:
	ID '::' ID;


QPREF:
	ID ('::' ID)?;

QCREF:
	(ID '::')* ID ('.' ID)?;
	
STAR : '*';

terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 

//terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal ID:	('a'..'z'
        |'A'..'Z'
        ) ( ('_')? ('a'..'z'
        |'A'..'Z'
        |'0'..'9'))*;
	

terminal WS			: (' '|'\t'|'\r'|'\n')+;


