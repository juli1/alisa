grammar edu.cmu.sei.alisa.Alisa with org.eclipse.xtext.common.Terminals

generate alisa "http://www.cmu.edu/sei/alisa/Alisa"
//import "platform:/resource/org.osate.aadl2/model/aadl2.ecore" as aadl2
//import "http://aadl.info/AADL/2.0" as aadl2

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.osate.aadl2/model/aadl2.ecore" as aadl2


AlisaModel:
	('imports' importedNamespace+=[Document](',' importedNamespace+=[Document])*';')?
	('with' importedNamespace+=[aadl2::AadlPackage|QPREF](',' importedNamespace+=[aadl2::AadlPackage|QPREF])*';')?
	content+=(Goals | Requirements | VerificationLibrary | RequirementDocument  
		| Stakeholders |ExternalDocuments 
		|Aliases | Notes
	)*;


//AlisaModel:
//	content+=(Stakeholder|Requirement|VerificationActivity|VerificationResult|ElementType)*;
//	

Document: 
	RequirementDocument | ExternalDocuments | VerificationLibrary
;

RequirementDocument:
	'requirement' 'document' name=ID
	content += (DocumentedRequirement  | ElementType | ElementReference)* 
	'end' 'requirement' 'document'
	';';

VerificationLibrary:
	'verification' 'library' name=ID
	content += (VerificationActivity | VerificationResult | ElementType | ElementReference)* 
	'end' 'verification' 'library'
	';';


Goals:
	'goals' name=ID 'for' goalTarget=[aadl2::NamedElement|QCLREF]
	(goals += Goal)*
	'end' 'goals'';'
	;
	

Goal:
	'goal' name=ID 
	( 'for' element=RELREF)? //goalTarget=[aadl2::NamedElement|RELREF])?
	('title' ':' title=ValueString ';')? 
	('description' ':' description=ValueString';')? 
	('assertion' ':' 	assert=ValueString ';')? 
	('rationale' ':' rationale=ValueString';')? 
	('issues' ':' issue+=ValueString (','issue+=ValueString)* ';')? 
	('see' ':' modelReference+=QCRELREF (',' modelReference+=QCRELREF)*';')? 
	('refines' ':' refinesReference+=[Goal|REQREF](',' refinesReference+=[Goal|REQREF])*';')? 
	('decomposes' ':' decomposesReference+=[Goal|REQREF](',' decomposesReference+=[Goal|REQREF])*';')? 
	('evolves' ':' evolvesReference+=[Goal|REQREF](',' evolvesReference+=[Goal|REQREF])*';')? 
	('conflicts' ':' evolvesReference+=[Goal|REQREF](',' evolvesReference+=[Goal|REQREF])*';')? 
	('stakeholder' ':' stakeholderReference+=[Stakeholder|RELREF] (',' stakeholderReference+=[Stakeholder|RELREF])*';')?
	('see' 'stakeholder' 'req' ':' stakeholderRequirementReference+=[DocumentedRequirement|REQREF] (',' stakeholderRequirementReference+=[DocumentedRequirement|REQREF])*';')?
	('see' 'document' ':' docReferences+=[ExternalDocument|RELREF] (',' docReferences+=[ExternalDocument|RELREF])*';')? 
	 'end''goal'';';

Requirements:
	'requirements' name=ID 'for' reqTarget=[aadl2::NamedElement|QCLREF]//(reqtarget=[aadl2::Classifier|QCLREF]|('property'reqtarget=[aadl2::Property|QCLREF ])) 
	(reqs+=Requirement)*
	'end' 'requirements' ';';

ReqKind : 'requirement'|'assumption'|'input''assumption'|'guarantee'|'output''guarantee'|'invariant'|'constraint'|'design''constraint'|'development' 'requirement'|'system' 'requirement';
	
Requirement:
	reqkind=ReqKind name=ID   
	
	( 'for' target=RELREF)? //reqTarget=[aadl2::NamedElement|RELREF])?
	('title' ':' title=ValueString';')? 
	('description' ':' description=ValueString';')? 
	('assertion' ':' assert=ValueString';')? 
	('rationale' ':' rationale=ValueString';')? 
	('issues' ':' issue+=ValueString (','issue+=ValueString)* ';')? 
	('see' ':' modelReference+=QCRELREF (',' modelReference+=QCRELREF)*';')? 
	('see' 'goal' ':' goalReference+=[Goal] (',' goalReference+=[Goal])*';')?
	('see' 'hazard' ':' hazardReference+=QNEREF (',' hazardReference+=QNEREF)*';')? // hazardReference+=[aadl2::NamedElement|QNEREF]
	('refines' ':' refinesReference+=[Requirement|REQREF](',' refinesReference+=[Requirement|REQREF])*';')? 
	('decomposes' ':' decomposesReference+=[Requirement|REQREF](',' decomposesReference+=[Requirement|REQREF])*';')? 
	('evolves' ':' evolvesReference+=[Requirement|REQREF](',' evolvesReference+=[Requirement|REQREF])*';')? 
	('verified' 'by' ':' verifiedBy+=(VerificationDecomposition)*)?
	('see' 'stakeholder' 'req' ':' stakeholderreqReference+=[DocumentedRequirement|REQREF] (',' stakeholderreqReference+=[DocumentedRequirement|REQREF])*';')?
	('see' 'system' 'req' ':' systemreqReference+=[DocumentedRequirement|REQREF] (',' systemreqReference+=[DocumentedRequirement|REQREF])*';')?
	('see' 'document' ':' docReferences+=[ExternalDocument|RELREF] (',' docReferences+=[ExternalDocument|RELREF])*';')? 
	'end''req'';';


ExternalDocuments:
	'documents'
	name=ID 
	docs+=ExternalDocument ( docs+=ExternalDocument)*
	'end''documents' ';'
	
;


ExternalDocument:
	'document'
	name=ID 'see' ':' xternalReference=STRING ';'
	
;

Aliases:
	'aliases''for' aliasesTarget=[aadl2::NamedElement|QCLREF] ':'
	aliases+=Alias ( aliases+=Alias)*
	'end' 'aliases'';'
;

Alias:
	alias=ValueString 'found' 'in' docRef+=[Document] (',' docRef+=[Document])* ';'
;



Notes:
	'notes''for' notesTarget=[aadl2::NamedElement|QCLREF]//(reqtarget=[aadl2::Classifier|QCLREF]|('property'reqtarget=[aadl2::Property|QCLREF ])) ':'
	notes+=ValueString ( notes+=ValueString)*
	'end' 'notes'';'
;

//
//NamedElement returns aadl2::NamedElement:
//Requirement| Goal|DocumentedRequirement|Stakeholder
//|VerificationActivity|VerificationResult;

//Element returns aadl2::Element:
//	Goals | ReqSpecifications 
//;



ValueString :
	// remove quotes from string in ValueConverter 
	STRING
;

/*
 * Stakeholder
 */
Stakeholder:
	'stakeholder' name=ID
	('title' ':' title=ValueString ';')?
	('description' ':' description=ValueString ';')?
	('role' ':' role=ValueString ';')?
	'end' 'stakeholder' ';'
;


Stakeholders:
	'organization' name=ID 
	(stakeholder += Stakeholder)*
	'end' 'organization'';'
	;


/*
 * Requirement
 */
DocumentedRequirement:
	'requirement' name=ID
	('title' ':' title=ValueString )?
	('description' ':' description=ValueString )?
	('comment' ':' comment=ValueString )?
	('assigned' 'to' ':' assignedTo+=([Stakeholder|RELREF])*)?
	('referenced' 'by' ':' referencedBy+=([ElementType|RELREF])*)?
	('verified' 'by' ':' verifiedBy+=(VerificationDecomposition)*)?
	('decomposed' 'by' ':' decomposedBy+=(DocumentedRequirementDecomposition)*)?
	'end' 'requirement' ';'
;

DocumentedRequirementDecomposition:
	element=([DocumentedRequirement|RELREF])|
	left=([DocumentedRequirement|RELREF]) type=('and'|'or') right=(DocumentedRequirementDecomposition)
;

VerificationDecomposition:
	element=([VerificationActivity|RELREF])|
	left=([VerificationActivity|RELREF]) type=('and'|'or') right=(VerificationDecomposition)
;



/*
 * System Element
 */
ElementType:
	'system' 'element' name=ID
	('reference' ':' reference=ValueString)?
	('element-type' ':' elementType=ValueString)?
	('model-type' ':' modelType=ValueString)?
	('documentDetails' ':' details=ValueString)?
	('version' ':' version+=(ValueString)*)?
	'end' 'system' 'element' ';'
;


/*
 * Element Reference
 */
ElementReference:
'element' 'reference' name=ID
('url' ':' url=ValueString)?
('model' 'reference' ':' modelReference+=[aadl2::NamedElement|RELREF])?
('reference-type' ':' referenceType=ValueString)?
('documentDetails' ':' details=ValueString)?
('version' ':' version+=(ValueString)*)?
'end' 'element' 'reference' ';'
;

/*
 * Verification Activity
 */

VerificationActivity:
	'verification' 'activity' name=ID
	('title' ':' title=ValueString';')?
	('description' ':' description=ValueString';')?
	('method' ':' method=VerificationMethod';')?
//	('parameters' ':' verificationParameters+=([ElementReference])*)?
	('decomposed' 'to' ':' decomposedTo+=(VerificationDecomposition)*';')?
	('assigned' 'to' ':' assignedTo+=([Stakeholder|RELREF])*';')?
	'end' 'verification' 'activity' ';'
;
 

VerificationMethod:
	'manual' | 'automatic' | 'review' | 'testing' | 'analysis' | 'verification'
;


/*
 * Verification Result
 */

VerificationResult:
	'verification' 'result' name=ID 'of' referencedVerificationMethod+=([VerificationActivity])*
	('output' ':' title=ValueString';')?
	('logfile' ':' description=ValueString';')?
	('date' ':' method=ValueString';')?
	('state' ':' state=VerificationResultState';')?
	('status' ':' status=VerificationResultStatus';')?
	'end' 'verification' 'result' ';'
;

VerificationResultState:
	'scheduled' | 'completed' | 'inprogress'
;

VerificationResultStatus:
	'pass' | 'fail' | 'unknown'
;

	// classifier reference
QCLREF:
	(ID '::')* ID ('.' ID)?;

	// package reference
QPREF:
	ID ('::' ID)*;

// error model element reference or other multi-dot path with or without qualifier
QNEREF:
	(ID '::')* ID ('.' ID)*;

//  dotted path property ref or property ref
QCRELREF:
	(QNEREF (PAREF)?)|PAREF
;

// dotted path as relative reference
RELREF:
	ID ('.' ID)* ;	

// reference to property (association)	
PAREF: '#' ID ('::' ID)?;

// requirement or goal reference (just dotted)
REQREF: (ID '.')* ID ;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

	//terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal ID:
	('a'..'z'
	| 'A'..'Z') (('_')? ('a'..'z'
	| 'A'..'Z'
	| '0'..'9'))*;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;



