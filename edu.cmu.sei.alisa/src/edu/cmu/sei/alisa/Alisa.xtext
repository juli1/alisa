grammar edu.cmu.sei.alisa.Alisa with org.eclipse.xtext.common.Terminals

generate alisa "http://www.cmu.edu/sei/alisa/Alisa"
//import "platform:/resource/org.osate.aadl2/model/aadl2.ecore" as aadl2
//import "http://aadl.info/AADL/2.0" as aadl2

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.osate.aadl2/model/aadl2.ecore" as aadl2

AlisaModel: RSALPackage | Organization;
	
NamedElement returns aadl2::NamedElement :
	ContractualElement | Category | RSALSection |RSALPackage
|Stakeholder |VerificationActivity|VerificationResult |ExternalDocument
| Organization | RSALElement | Organization | AlisaModel

;

RSALPackage returns RSALContainer:
	"package" name = ID
	('imports' importedNamespace+=[RSALContainer](',' importedNamespace+=[RSALContainer])*)?
	('with' importedNamespace+=[aadl2::AadlPackage|QPREF](',' importedNamespace+=[aadl2::AadlPackage|QPREF])*)?
	content+= RSALElement+  
	('issues'  issue+=ValueString (',' issue+=ValueString)* )? 
	'end'
	;

RSALElement:
	ContractualElement| Goal | Requirement | RSALSection | Stakeholder | VerificationActivity | Category |ExternalDocument
;
	
RSALSection returns RSALContainer:
	'section' name =ID ('for' target=[aadl2::NamedElement|QNEREF])?
		content += RSALElement+ 
	('issues'  issue+=ValueString (','issue+=ValueString)* )? 
	'end' 
;

Organization:
	'organization' name = ID
	stakeholder += Stakeholder+
	'end'
;	

CR returns ContractualElement: Goal | Requirement;

ContractualElement:
	'cr' name=ID 
	(( 'for' target=[aadl2::NamedElement|QNEREF])?
	 &('category'  category+=[Category|DOTTEDREF](','category+=[Category|DOTTEDREF])*)?
	 &('title'  title=ValueString )? 
	 &('description'  description=ValueString)? 
	 &('assertion'  	assert=ValueString )? 
	 &('rationale'  rationale=ValueString)? 
	 &('issues'  issue+=ValueString (','issue+=ValueString)* )? 
	 &('section'  sectionReference+=[RSALContainer|DOTTEDREF] (',' sectionReference+=[RSALContainer|DOTTEDREF])*)? 
	 &('refines'  refinesReference+=[ContractualElement|DOTTEDREF](',' refinesReference+=[ContractualElement|DOTTEDREF])*)? 
	 &('decomposes'  decomposesReference+=[ContractualElement|DOTTEDREF](',' decomposesReference+=[ContractualElement|DOTTEDREF])*)? 
	 &('evolves'  evolvesReference+=[ContractualElement|DOTTEDREF](',' evolvesReference+=[ContractualElement|DOTTEDREF])*)? 
	 &('conflicts'  conflictsReference+=[ContractualElement|DOTTEDREF](',' conflictsReference+=[ContractualElement|DOTTEDREF])*)? 
	 &('stakeholder'  stakeholderReference+=[Stakeholder|DOTTEDREF] (',' stakeholderReference+=[Stakeholder|DOTTEDREF])*)?
	 &('see' 'stakeholder' 'req'  stakeholderRequirementReference+=[ContractualElement|DOTTEDREF] (',' stakeholderRequirementReference+=[ContractualElement|DOTTEDREF])*)?
	 &('see' 'system' 'req'  systemRequirementReference+=[ContractualElement|DOTTEDREF] (',' systemRequirementReference+=[ContractualElement|DOTTEDREF])*)?
	&('see' 'document'  docReference+=XDocUri (',' docReference+=XDocUri)*)? 
	& ('see' ':' modelReference+=QDOTTEDPAREF (',' modelReference+=QDOTTEDPAREF)*)? 
	)
	 'end';


Goal returns Goal:
	'goal' name=ID 
	(( 'for' target=[aadl2::NamedElement|QNEREF])?
	 &('category'  category+=[Category|DOTTEDREF](','category+=[Category|DOTTEDREF])*)?
	 &('title'  title=ValueString )? 
	 &('description'  description=ValueString)? 
	 &('assertion'  	assert=ValueString )? 
	 &('rationale'  rationale=ValueString)? 
	 &('issues'  issue+=ValueString (','issue+=ValueString)* )? 
	 &('refines'  refinesReference+=[Goal|DOTTEDREF](',' refinesReference+=[Goal|DOTTEDREF])*)? 
	 &('decomposes'  decomposesReference+=[Goal|DOTTEDREF](',' decomposesReference+=[Goal|DOTTEDREF])*)? 
	 &('evolves'  evolvesReference+=[Goal|DOTTEDREF](',' evolvesReference+=[Goal|DOTTEDREF])*)? 
	 &('conflicts'  conflictsReference+=[Goal|DOTTEDREF](',' conflictsReference+=[Goal|DOTTEDREF])*)? 
	 &('stakeholder'  stakeholderReference+=[Stakeholder|DOTTEDREF] (',' stakeholderReference+=[Stakeholder|DOTTEDREF])*)?
	 &('see' 'stakeholder' 'req'  stakeholderRequirementReference+=[Goal|DOTTEDREF] (',' stakeholderRequirementReference+=[Goal|DOTTEDREF])*)?
	 &('see' 'system' 'req'  systemRequirementReference+=[ContractualElement|DOTTEDREF] (',' systemRequirementReference+=[ContractualElement|DOTTEDREF])*)?
	 &('see' 'document'  docReference+=XDocUri (',' docReference+=XDocUri)*)? 
	& ('see' ':' modelReference+=QDOTTEDPAREF (',' modelReference+=QDOTTEDPAREF)*)? 
	)
	 'end';
	
Requirement:
	'requirement'  name=ID   
	(( 'for' target=[aadl2::NamedElement|QNEREF])?
 	&('category'  category+=[Category|DOTTEDREF](',' category+=[Category|DOTTEDREF])*)?
	&('title'  title=ValueString)? 
	&('description'  description=ValueString)? 
	&('assertion'  assert=ValueString)? 
	&('rationale'  rationale=ValueString)? 
	&('issues'  issue+=ValueString (','issue+=ValueString)* )? 
	&('see' 'goal'  goalReference+=[Goal] (',' goalReference+=[Goal])*)?
	&('see' 'hazard'  hazardReference+=QNEREF (',' hazardReference+=QNEREF)*)? // hazardReference+=[aadl2::NamedElement|QNEREF]
	&('refines'  refinesReference+=[Requirement|DOTTEDREF](',' refinesReference+=[Requirement|DOTTEDREF])*)? 
	&('decomposes'  decomposesReference+=[Requirement|DOTTEDREF](',' decomposesReference+=[Requirement|DOTTEDREF])*)? 
	&('evolves'  evolvesReference+=[Requirement|DOTTEDREF](',' evolvesReference+=[Requirement|DOTTEDREF])*)? 
	&('see' 'stakeholder' 'req'  stakeholderRequirementReference+=[Goal|DOTTEDREF] (',' stakeholderRequirementReference+=[Goal|DOTTEDREF])*)?
	&('see' 'system' 'req'  systemRequirementReference+=[ContractualElement|DOTTEDREF] (',' systemRequirementReference+=[ContractualElement|DOTTEDREF])*)?
	&('verified' 'by'  verifiedBy+=(VerificationDecomposition)*)?
	&('see' 'document'  docReference+=XDocUri (',' docReference+=XDocUri)*)? 
	& ('see' ':' modelReference+=QDOTTEDPAREF (',' modelReference+=QDOTTEDPAREF)*)? 
	)
	'end';



ExternalDocument:
	'document'
	name=ID 'see'  externalReference=DOCPATH 
	'end'	
;


XDocUri : 
	docReference=[ExternalDocument|DOTTEDREF] ( '#' docFragment=DOCFRAGMENT)?
;


Category :
	'category' name = ID ('extends' extends=[Category|DOTTEDREF])? 'end'
;


ValueString :
	// remove quotes from string in ValueConverter 
	STRING
;

/*
 * Stakeholder
 */
Stakeholder:
	'stakeholder' name=ID
	(('title'  title=ValueString )?
	&('description'  description=ValueString )?
	&('role'  role=ValueString )?
	&('oranization' organziation = ValueString)
	&('email'  email=ValueString)?
	&('phone'  phone=ValueString)?)
	'end' 
;




VerificationDecomposition:
	element=([VerificationActivity|DOTTEDREF])|
	left=([VerificationActivity|DOTTEDREF]) type=('and'|'or') right=(VerificationDecomposition)
;



/*
 * Verification Activity
 */

VerificationActivity:
	'verification' 'activity' name=ID
	('title'  title=ValueString)?
	('description'  description=ValueString)?
	('method'  method=VerificationMethod)?
//	('parameters'  verificationParameters+=([ElementReference])*)?
	('decomposed' 'to'  decomposedTo+=(VerificationDecomposition)*)?
	('assigned' 'to'  assignedTo+=([Stakeholder|DOTTEDREF])*)?
	'end'  
;
 

VerificationMethod:
	'manual' | 'automatic' | 'review' | 'testing' | 'analysis' | 'verification'
;


/*
 * Verification Result
 */

VerificationResult:
	'verification' 'result' name=ID 'of' referencedVerificationMethod+=([VerificationActivity])*
	('output'  title=ValueString)?
	('logfile'  description=ValueString)?
	('date'  method=ValueString)?
	('state'  state=VerificationResultState)?
	('status'  status=VerificationResultStatus)?
	'end'  
;

enum  VerificationResultState:
	SCHEDULED='scheduled' | COMPLETED='completed' | INPROGRESS='inprogress'
;

enum VerificationResultStatus:
	PASS='pass' | FAIL='fail' | UNKNOWN='unknown'
;

//	// classifier reference
//QCLREF:
//	(ID '::')* ID ('.' ID)?;

	// package reference
QPREF:
	ID ('::' ID)*;

// named element reference or other multi-dot path with or without qualifier
QNEREF:
	(ID '::')* ID ('.' ID)*;

//  dotted path property ref or property ref
QDOTTEDPAREF:
	(QNEREF (PAREF)?)|PAREF
;

// dotted path as relative reference
DOTTEDREF:
	ID ('.' ID)* ;	


// reference to property (association)	
PAREF: '#' ID ('::' ID)?;


DOCPATH: ( ID '/')* ID '.' ID;

DOCFRAGMENT: ID ('.' ID)*;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

	//terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal ID:
	('a'..'z'
	| 'A'..'Z') (('_')? ('a'..'z'
	| 'A'..'Z'
	| '0'..'9'))*;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;



